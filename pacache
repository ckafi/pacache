#!/usr/bin/env python3
#Filename: pacache

#Created: 2011-07-03
#Changed: 2011-07-21

#DESCRIPTION: A caching proxy for pacman packages.

#USAGE:

#Contact: tobias@frilling-online.de

#Copyright (C) 2011 Tobias Frilling
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.

#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.

import configparser
import os
import urllib.request
from http.server import HTTPServer, BaseHTTPRequestHandler
from socketserver import ThreadingMixIn
from shutil import move


def main():
	#TODO: Get these options from a config file or command line
	port = 1111
	config_file = '/etc/pacman.conf'
	cache_dir = '/var/cache/pacman/pkg/'
	log_errors_only = True

	server = MyThreadingHTTPServer(('',port), MyHandler)
	server.servers = parse_pacman_config(config_file)
	server.cache_dir = cache_dir
	server.file_locks = []
	server.log_errors_only = log_errors_only
	print("Serving "+cache_dir+" on port "+str(port))
	try:
		server.serve_forever()
	except KeyboardInterrupt:
		server.server_close()


def parse_pacman_config(config_file):
	'''Parses a pacman config file and maps the servers'''

	def include(repo,filename):
		'''Includes the servers in filename into repo'''
		for line in open(filename).readlines():
			line = line.strip()
			if line == '': continue
			if line[0] == '#': continue
			(key,value) = line.split('=',1)
			key = key.strip();value = value.strip()
			if key == 'Server': servers[repo].append(value)

	parser = configparser.ConfigParser()
	parser.read(config_file)
	servers = {}
	for repo in parser.sections():
		if repo == 'options': continue
		servers[repo] = []
		for (key,value) in parser.items(repo):
			if key == 'server': servers[repo].append(value)
			if key == 'include': include(repo,value)
	return servers


class MyThreadingHTTPServer(ThreadingMixIn, HTTPServer):
	pass


class MyHandler(BaseHTTPRequestHandler):

	def do_GET(self):

		package = os.path.basename(self.path)
		dirname = os.path.dirname(self.path).split('/')
		try:
			repo = dirname[1]
			arch = dirname[3]
		except IndexError:
			self.send_response(404)
			self.log_error("Incorrect syntax: "+self.path)
			return
		if repo not in self.server.servers.keys():
			self.send_response(404)
			self.log_error("No such repo: "+repo)
			return
		if '.pkg.' in package:
			path = os.path.join(self.server.cache_dir,package)
			if os.path.isfile(path):
				self.send_file(path)
			else:
				self.get_and_send_file(repo,arch,package)
		else:
			self.redirect(repo,arch,package)


	def send_file(self,path):
		try:
			f = open(path,'rb')
		except IOError as ex:
			self.log_error(str(ex))
			self.send_response(500)
			return
		self.send_response(200)
		print(path)
		self.send_header('Content-Type','application/x-tar')
		self.send_header('Content-Length',os.path.getsize(path))
		self.end_headers()
		self.wfile.write(f.read())
		f.close()

	def get_and_send_file(self,repo,arch,package):
		url_source = self.find_server(repo,arch,package)
		if url_source is None:
			self.send_response(404)
			self.log_error("No such package: %s %s %s" % (repo,arch,package))
			return
		if package in self.server.file_locks:
			self.send_response(307)
			self.send_header("Location",url_source.url)
			self.end_headers()
			url_source.close()
			return
		self.server.file_locks.append(package)
		try:
			local_file = open('/tmp/%s.part'%package,'wb')
		except IOError as ex:
			self.log_error(str(ex))
			self.send_response(500)
			self.server.file_locks.remove(package)
			return
		self.send_response(200)
		self.send_header('Content-Type','application/x-tar')
		self.send_header('Content-Length',url_source.getheader('Content-Length'))
		self.end_headers()
		chunk = url_source.read(100)
		while chunk != b'':
			self.wfile.write(chunk)
			local_file.write(chunk)
			chunk = url_source.read(100)
		local_file.close()
		url_source.close()
		try:
			move('/tmp/%s.part'%package,os.path.join(self.server.cache_dir,package))
		except IOError as ex:
			self.log_error(str(ex))
		self.server.file_locks.remove(package)

	def redirect(self,repo,arch,package):
		url_source = self.find_server(repo,arch,package)
		if url_source is None:
			self.send_response(404)
			self.log_error("No such package: %s %s %s" % (repo,arch,package))
			return
		self.send_response(307)
		self.send_header("Location",url_source.url)
		self.end_headers()
		url_source.close()

	def find_server(self,repo,arch,package):
		found = False
		for server in self.server.servers[repo]:
			url = server
			url = url.replace('$repo',repo)
			url = url.replace('$arch',arch)
			if url[-1] != '/': url += '/'
			url += package
			try:
				url_source = urllib.request.urlopen(url)
				found = True
				break
			except urllib.error.URLError: pass
		if not found: url_source = None
		return url_source

	def log_request(self,code='-',size='-'):
		if not self.server.log_errors_only:
			super().log_request(code,size)


if __name__ == '__main__':
	main()
